@Library('jenkins-shared-library@master')
import com.boxboat.jenkins.pipeline.common.vault.*
import com.boxboat.jenkins.pipeline.common.dockcmd.*
import com.boxboat.jenkins.pipeline.deploy.*


def execute() {

    params.deploymentKey = "dev"
    def deploy = new BoxDeploy(
        globalConfigPath: "com/boxboat/jenkins/config.example.yaml",
        config: [
            images: [
                "test/a",
                "test/b",
            ],
        ]
    )

    node() {
        deploy.wrap {
            stage('Deploy'){
                deploy.writeImageTags(
                    outFile: "image-tags.yaml",
                    yamlPath: ["global"],
                )
                VaultSecretScriptHelper.file(
                    base64: true,
                    format: "env",
                    outFile: "env-vars.yaml",
                    vaultPaths: ["secret/test"],
                    yamlPath: ["global", "envVarsFileContent"],
                )
                def dockcmdVault = new DockcmdGetSecrets(
                    vaultKey: "default",
                    options: [
                        "input-file": "secret-values-template.yaml",
                        "output-file": "secret-values.yaml",
                        "set": [
                            "Deployment=dev",
                            "Foo=bar",
                        ]
                    ],
                )

                dockcmdVault.parseVaultSecrets()

                def dockcmdAws = new DockcmdGetSecrets(
                    awsProfileKey: "default",
                    files: [
                        "secret-values-*.yaml",
                    ],
                    options: [
                        "edit-in-place": true,
                        "set": [
                            "Deployment=dev",
                            "Foo=bar",
                        ]
                    ],
                )

                dockcmdAws.parseAwsSecrets()

                def dockcmdAzure = new DockcmdGetSecrets(
                    azureProfileKey: "default",
                    files: [
                        "secret-values-*.yaml",
                    ],
                    options: [
                        "edit-in-place": true,
                        "set": [
                            "Deployment=dev",
                            "Foo=bar",
                        ]
                    ],
                )

                dockcmdAzure.parseAzureSecrets()


                deploy.withCredentials() {
                    sh "helm upgrade --install test ."
                }
            }
        }
    }

}

return this
